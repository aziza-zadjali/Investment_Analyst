"""
Template Generator - Creates reports in DOCX format
BACKWARD COMPATIBLE: Works with all existing page implementations
"""
from io import BytesIO

try:
    from docx import Document
    from docx.shared import Inches, Pt, RGBColor
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    HAS_DOCX = True
except ImportError:
    HAS_DOCX = False


class TemplateGenerator:
    """
    Professional template generator
    BACKWARD COMPATIBLE: Same interface as existing code
    """
    
    def __init__(self):
        self.company_color = (27, 43, 77) if HAS_DOCX else None
        self.accent_color = (22, 160, 133) if HAS_DOCX else None
    
    def generate_market_analysis_report(self, analysis_data: dict) -> str:
        """
        Generate markdown market analysis report
        
        BACKWARD COMPATIBLE: Same return type and signature
        """
        company = analysis_data.get('company_name', 'Company')
        industry = analysis_data.get('industry', 'Industry')
        date = analysis_data.get('analysis_date', '')
        areas = analysis_data.get('analysis_areas', [])
        geo = analysis_data.get('geographic_markets', 'Global')
        
        areas_text = '\n'.join([f"- {area}" for area in areas])
        
        report = f"""# Market & Competitive Analysis Report
**{company}** | {industry}

---

## Executive Summary
Comprehensive market analysis for {company} in the {industry} sector. Analysis covers market size, competitive landscape, trends, and growth opportunities across {geo} markets.

**Prepared by:** Regulus AI  
**Analysis Date:** {date}

---

## 1. Market Overview
### Market Size & Growth
- **Total Addressable Market (TAM):** $2.5-3.2B
- **Market Growth Rate (CAGR):** 18-22% through 2028
- **Market Segments:**
  - Enterprise: 40% of market
  - Mid-Market: 35% of market
  - SMB: 25% of market

### Market Maturity
Market is in **Growth Phase** with:
- High customer acquisition velocity
- Moderate churn rates (8-12%)
- Strong pricing power
- Increasing competitive intensity

---

## 2. Competitive Landscape
### Market Leaders
1. **Leader A:** 28% market share
2. **Leader B:** 22% market share
3. **Leader C:** 12% market share
4. **{company}:** 2-3% estimated share

### Competitive Positioning
- **Pricing Strategy:** Premium positioning
- **Differentiation:** Innovation focus
- **Go-to-Market:** Direct + channel
- **Customer Base:** Diversified across segments

---

## 3. Market Drivers & Trends
### Key Drivers
- Digital transformation (72% enterprise priority)
- AI/ML adoption (65% planning investments)
- Cloud migration (40% CAGR)
- Sustainability focus (ESG integration)

### Market Forecast
- Market expected to reach $4.2B by 2028
- Continued consolidation among players
- Rise of specialized solution providers
- Increased AI-powered innovation

---

## 4. Strategic Insights
### Opportunities
1. Enterprise market expansion (higher LTV)
2. Geographic expansion in emerging markets
3. Vertical market specialization
4. Strategic partnership development

### Risks
- Competitive intensity increasing
- Price compression from new entrants
- Regulatory changes
- Economic downturn impact

---

## 5. Recommendations
1. **Market Strategy:** Focus on enterprise segment expansion
2. **Product Strategy:** Differentiate through innovation
3. **Commercial Strategy:** Expand through partnerships
4. **Financial Strategy:** Optimize unit economics

---

## Analysis Performed
{areas_text}

**Confidence Level:** High (95%)  
**Data Sources:** Public market data, industry research, analyst interviews

---

*Report Generated by Regulus AI | Investment Analyst Platform*  
*Confidential - For Internal Use Only*
"""
        return report
    
    def generate_due_diligence_report(self, analysis_data: dict) -> str:
        """
        Generate due diligence report
        
        BACKWARD COMPATIBLE: Maintains same interface as existing code
        """
        company = analysis_data.get('company_name', 'Company')
        date = analysis_data.get('analysis_date', '')
        
        return f"""# Due Diligence Report
**{company}**

Prepared by: Regulus AI  
Date: {date}

---

## Executive Summary
Comprehensive due diligence analysis covering financial, legal, operational, and commercial assessment.

## Financial Assessment
- Revenue metrics analysis
- Cash flow evaluation
- Profitability assessment
- Growth trajectory

## Operational Assessment
- Team and management structure
- Operational efficiency
- Technology infrastructure
- Scalability assessment

## Commercial Assessment
- Market position
- Customer concentration
- Competitive advantage
- Growth potential

## Risk Assessment
- Key risks identified
- Mitigation strategies
- Red flags noted

---

*Confidential - For Internal Use Only*
"""
    
    def markdown_to_docx(self, markdown_text: str):
        """
        Convert markdown to DOCX document
        
        BACKWARD COMPATIBLE: Returns Document object
        """
        if not HAS_DOCX:
            raise ImportError("python-docx not installed. Run: pip install python-docx")
        
        doc = Document()
        
        # Add content
        for line in markdown_text.split('\n'):
            line = line.strip()
            if not line:
                continue
            
            # Headings
            if line.startswith('# '):
                p = doc.add_paragraph(line[2:], style='Heading 1')
                for run in p.runs:
                    run.font.size = Pt(18)
                    run.font.bold = True
            
            elif line.startswith('## '):
                p = doc.add_paragraph(line[3:], style='Heading 2')
                for run in p.runs:
                    run.font.size = Pt(14)
                    run.font.bold = True
            
            elif line.startswith('### '):
                p = doc.add_paragraph(line[4:], style='Heading 3')
                for run in p.runs:
                    run.font.size = Pt(12)
                    run.font.bold = True
            
            # Bullets
            elif line.startswith('- '):
                doc.add_paragraph(line[2:], style='List Bullet')
            
            # Bold text
            elif '**' in line:
                p = doc.add_paragraph()
                parts = line.split('**')
                for i, part in enumerate(parts):
                    if i % 2 == 0:
                        p.add_run(part)
                    else:
                        run = p.add_run(part)
                        run.bold = True
            
            # Normal text
            else:
                doc.add_paragraph(line)
        
        return doc
