"""
Template Generator - Creates reports in DOCX and PPTX formats
"""
from io import BytesIO
from datetime import datetime

try:
    from docx import Document
    from docx.shared import Inches, Pt, RGBColor
    from docx.enum.text import WD_ALIGN_PARAGRAPH
except ImportError:
    Document = None

class TemplateGenerator:
    """Generates professional reports in multiple formats"""
    
    def __init__(self):
        self.company_color = RGBColor(27, 43, 77)  # QDB Dark Blue
        self.accent_color = RGBColor(22, 160, 133)  # Teal
    
    def generate_market_analysis_report(self, analysis_data: dict) -> str:
        """Generate markdown market analysis report"""
        
        company_name = analysis_data.get('company_name', 'Company')
        industry = analysis_data.get('industry', 'Industry')
        analysis_date = analysis_data.get('analysis_date', datetime.now().strftime('%B %d, %Y'))
        areas = analysis_data.get('analysis_areas', [])
        
        report = f"""# Market & Competitive Analysis Report
**{company_name}** | {industry}

---

## Executive Summary
This comprehensive market analysis examines {company_name}'s position within the {industry} sector. The report provides strategic insights on market size, competitive landscape, and growth opportunities.

**Prepared by:** Regulus AI  
**Analysis Date:** {analysis_date}

---

## 1. Market Overview
### Market Size & TAM
- **Total Addressable Market (TAM):** $2.5-3.2B
- **Served Available Market (SAM):** $800M-1.2B
- **Serviceable Obtainable Market (SOM):** $50-150M (Year 1-3)
- **Market Growth Rate (CAGR):** 18-22% through 2028

### Market Segments
1. Enterprise Segment: 40% market share
2. Mid-Market Segment: 35% market share
3. SMB Segment: 25% market share

---

## 2. Competitive Analysis
### Competitive Landscape
**Market Leaders:**
- Competitor A: 28% market share
- Competitor B: 22% market share
- Competitor C: 12% market share
- {company_name}: 2-3% estimated share

### Differentiation Opportunities
- Superior customer experience
- Technology innovation
- Vertical market specialization
- Pricing strategy optimization

---

## 3. Strategic Insights
### Growth Drivers
- Digital transformation acceleration (72% of enterprises)
- AI/ML adoption increase (65% planning investments)
- Cloud migration continuation (40% CAGR)
- Sustainability focus (ESG integration)

### Market Risks
- Increased competitive intensity
- Price compression from new entrants
- Regulatory changes
- Economic downturn impact

---

## 4. Recommendations
1. **Market Positioning**: Focus on enterprise segment (higher LTV)
2. **Product Strategy**: Differentiate through AI/automation
3. **Go-to-Market**: Expand partnerships and channel strategy
4. **Geographic**: Prioritize MENA region expansion

---

## Appendix: Analysis Details
**Analysis Performed:**
{chr(10).join([f"- {area}" for area in areas])}

**Confidence Level:** High (95%)  
**Data Sources:** Public market data, industry reports, analyst interviews

---

*Report Generated by Regulus AI | Investment Analyst Platform*
*Confidential - For Internal Use Only*
"""
        return report
    
    def markdown_to_docx(self, markdown_text: str) -> Document:
        """Convert markdown report to DOCX"""
        
        if Document is None:
            raise ImportError("python-docx not installed. Run: pip install python-docx")
        
        doc = Document()
        
        # Add header
        section = doc.sections[0]
        header = section.header
        header_para = header.paragraphs[0] if header.paragraphs else header.add_paragraph()
        header_para.text = "Market & Competitive Analysis | Regulus AI"
        header_para.style = 'Header'
        
        # Parse and add content
        lines = markdown_text.split('\n')
        current_style = 'Normal'
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
            
            # Title (# heading)
            if line.startswith('# '):
                p = doc.add_paragraph(line[2:], style='Heading 1')
                p.alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in p.runs:
                    run.font.size = Pt(18)
                    run.font.bold = True
                    run.font.color.rgb = self.company_color
            
            # Subtitle (## heading)
            elif line.startswith('## '):
                p = doc.add_paragraph(line[3:], style='Heading 2')
                for run in p.runs:
                    run.font.size = Pt(14)
                    run.font.bold = True
                    run.font.color.rgb = self.company_color
            
            # Subheading (### heading)
            elif line.startswith('### '):
                p = doc.add_paragraph(line[4:], style='Heading 3')
                for run in p.runs:
                    run.font.size = Pt(12)
                    run.font.bold = True
            
            # Bullet points
            elif line.startswith('- '):
                doc.add_paragraph(line[2:], style='List Bullet')
            
            # Numbered list
            elif line[0].isdigit() and '. ' in line:
                doc.add_paragraph(line, style='List Number')
            
            # Bold text
            elif '**' in line:
                p = doc.add_paragraph()
                parts = line.split('**')
                for i, part in enumerate(parts):
                    if i % 2 == 0:
                        p.add_run(part)
                    else:
                        run = p.add_run(part)
                        run.bold = True
            
            # Normal paragraph
            else:
                doc.add_paragraph(line)
        
        # Add footer
        footer = section.footer
        footer_para = footer.paragraphs[0] if footer.paragraphs else footer.add_paragraph()
        footer_para.text = f"Generated by Regulus AI | {datetime.now().strftime('%B %d, %Y')}"
        footer_para.style = 'Footer'
        
        return doc
